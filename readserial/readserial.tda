// @lang=tda @ts=2

module readserial_property_suite(clk, reset_n, rxd, data, valid, state_s, cnt_s, cnt_en);

input logic clk;
input logic reset_n;
input logic rxd;
input logic [7:0] data;
input logic valid;
input logic state_s;
input logic [7:0] cnt_s;
input logic cnt_en;

parameter s_IDLE  = 1'b0;
parameter s_READDATA  = 1'b1;

// Sequence definition for SVA property

`define true 1

`include "tidal.sv"

`begin_tda(ops)

// Sequence definition for TiDAL property
sequence reset_sequence;
  reset_n == 1'b0;
endsequence;

sequence in_idle_counter_is_0;
  !(state_s == s_IDLE) || cnt_s == 3'b0;
endsequence;

sequence in_idle_counter_is_not_enabled;
  !(state_s == s_IDLE) || cnt_en == 1'b0;
endsequence;


// Your operational properties
property reset;
  reset_sequence
  
  |=>
  
  t##0 state_s == s_IDLE and
  t##0 valid == 1'b0 and
  t##0 cnt_s == 3'b0 and
  t##0 cnt_en == 1'b0;
endproperty


property stay_in_idle;
  t##0 state_s == s_IDLE and
  t##0 rxd == 1'b1 and
  t##0 in_idle_counter_is_0 and
  t##0 in_idle_counter_is_not_enabled

  implies

  t##1 in_idle_counter_is_0 and
  t##1 in_idle_counter_is_not_enabled and
  t##1 state_s == s_IDLE and
  t##1 valid == 1'b0;
endproperty;


property read_byte;
  logic sd0;
  logic sd1;
  logic sd2;
  logic sd3;
  logic sd4;
  logic sd5;
  logic sd6;
  logic sd7;

  // Freeze all the 8 bits of the transmission, for later checking
  t##1 set_freeze(sd7, rxd) and
  t##2 set_freeze(sd6, rxd) and
  t##3 set_freeze(sd5, rxd) and
  t##4 set_freeze(sd4, rxd) and
  t##5 set_freeze(sd3, rxd) and
  t##6 set_freeze(sd2, rxd) and
  t##7 set_freeze(sd1, rxd) and
  t##8 set_freeze(sd0, rxd) and
  

  // Assume invariants
  t##0 in_idle_counter_is_0 and
  t##0 in_idle_counter_is_not_enabled and
  
  // Assume the device starts in the IDLE state, and a start bit arrives
  t##0 state_s == s_IDLE and
  t##0 rxd == 1'b0
  
  implies

  // Assert that the state is READDATA for 8 cycles
  t##1 state_s == s_READDATA and
  t##1 valid == 1'b0 and
  t##2 state_s == s_READDATA and
  t##2 valid == 1'b0 and
  t##3 state_s == s_READDATA and
  t##3 valid == 1'b0 and
  t##4 state_s == s_READDATA and
  t##4 valid == 1'b0 and
  t##5 state_s == s_READDATA and
  t##5 valid == 1'b0 and
  t##6 state_s == s_READDATA and
  t##6 valid == 1'b0 and
  t##7 state_s == s_READDATA and
  t##7 valid == 1'b0 and
  t##8 state_s == s_READDATA and
  t##8 valid == 1'b0 and


  t##9 in_idle_counter_is_0 and
  t##9 in_idle_counter_is_not_enabled and

  // Assert that the state returns to IDLE, that the correct data is presented on the data output,
  // and that the valid signal goes high for one clock cycle.
  t##9 state_s == s_IDLE and
  t##9 valid == 1'b1 and
  t##9 data == {sd7, sd6, sd5, sd4, sd3, sd2, sd1, sd0};// and

  //t##10 in_idle_counter_is_0 and
  //t##10 in_idle_counter_is_not_enabled and

  //t##10 valid == 1'b0 and
  //t##10 cnt_s == 3'b0;
endproperty;


property in_idle_counter_is_not_enabled__step;
  t##0 in_idle_counter_is_not_enabled
  implies
  t##1 in_idle_counter_is_not_enabled;
endproperty;

property in_idle_counter_is_not_enabled__base;
  t##0 reset_sequence
  implies
  t##0 in_idle_counter_is_not_enabled;
endproperty;


property in_idle_counter_is_0__step;
  t##0 in_idle_counter_is_0 and
  t##1 in_idle_counter_is_0
  implies
  t##2 in_idle_counter_is_0;
endproperty;

property in_idle_counter_is_0__base;
  t##0 reset_sequence
  implies
  t##0 in_idle_counter_is_0 and
  t##1 in_idle_counter_is_0;
endproperty;


// Assert your properties
a_reset: assert property (@(posedge clk) reset);
a_stay_in_idle: assert property (@(posedge clk) disable iff (reset_n == 0) stay_in_idle);
a_read_byte: assert property (@(posedge clk) disable iff (reset_n == 0) read_byte);
a_in_idle_counter_is_not_enabled__step: assert property (@(posedge clk) disable iff (reset_n == 0) in_idle_counter_is_not_enabled__step);
a_in_idle_counter_is_not_enabled__base: assert property (@(posedge clk) disable iff (reset_n == 0) in_idle_counter_is_not_enabled__base);
a_in_idle_counter_is_0__step: assert property (@(posedge clk) disable iff (reset_n == 0) in_idle_counter_is_0__step);
a_in_idle_counter_is_0__base: assert property (@(posedge clk) disable iff (reset_n == 0) in_idle_counter_is_0__base);

`end_tda

endmodule

// Your bind statement
bind readserial readserial_property_suite inst_readserial_properties(.*);
